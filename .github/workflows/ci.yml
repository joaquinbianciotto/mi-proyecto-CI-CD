# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Continuous Integration

on:
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    outputs:
      failure_type: ${{ steps.detect_failure.outputs.failure_type }}
    steps:
    - name: Checkout code  
      uses: actions/checkout@v4

    - name: Build Docker image
      id: build_docker
      run: |
        docker build -t myapp:latest .
        echo "Imagen Docker construida correctamente como myapp:latest"

    - name: Run tests inside Docker container
      id: test_docker
      run: |
        echo "Ejecutando tests dentro del contenedor Docker..."
        docker run --rm myapp:latest pytest -v
        
    - name: Run linting inside Docker container
      id: lint_docker
      run: |
        echo "Ejecutando linting dentro del contenedor Docker..."
        docker run --rm myapp:latest flake8 app/
        
    # Detectar fallos y enviar notificaciones, solo si alguno de los pasos anteriores falla
    - name: Detectar fallos
      id: detect_failure
      if: failure()
      run: |
        if [[ ${{ steps.build_docker.outcome }} == 'failure' ]]; then
          echo "failure_type=üê≥ Error al construir la imagen Docker" >> $GITHUB_OUTPUT
        elif [[ ${{ steps.test_docker.outcome }} == 'failure' ]]; then
          echo "failure_type=üß™ Error en las pruebas (pytest)" >> $GITHUB_OUTPUT
        elif [[ ${{ steps.lint_docker.outcome }} == 'failure' ]]; then
          echo "failure_type=üîç Error en la verificaci√≥n de estilo (flake8)" >> $GITHUB_OUTPUT
        else
          echo "failure_type=unknown" >> $GITHUB_OUTPUT
        fi

  BuildNotification:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: build
    if: always() 
    steps:
    - name: Send Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        # El webhook es un secreto, como lo tienes
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        # El color y el t√≠tulo cambian din√°micamente seg√∫n el resultado del job 'build'
        SLACK_COLOR: ${{ needs.build.result == 'success' && 'good' || 'danger' }}
        SLACK_TITLE: ${{ needs.build.result == 'success' && '‚úÖ CI Pipeline Exitoso' || '‚ùå CI Pipeline Fallido' }}
        SLACK_USERNAME: CI Bot
        SLACK_ICON: https://github.com/favicon.ico
        SLACK_MESSAGE: |
          *Repositorio:* `${{ github.repository }}`
          *Pull Request:* `${{ github.event.pull_request.html_url }}`
          *Autor:* `${{ github.actor }}`
          *Commit:* `${{ github.sha }}`
          ${{ needs.build.result == 'success' && 'Todas las validaciones han pasado exitosamente.' || format('La build ha fallado. Origen del fallo: `{0}`', needs.build.outputs.failure_type) }}
          
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}


  build-and-push-to-ecr:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: build
    outputs:
      image_tag: ${{ steps.build_push.outputs.image_tag }}
      image_uri: ${{ steps.build_push.outputs.image_uri }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: public

    - name: Build, tag, and push image to Amazon ECR
      id: build_push
      env:
        ECR_PUBLIC_REPOSITORY_URI: ${{ secrets.ECR_PUBLIC_REPOSITORY_URI }}
        IMAGE_TAG: ${{ github.sha }}
        IMAGE_URI: ${{ secrets.ECR_PUBLIC_REPOSITORY_URI }}
      run: |
        docker build -t "$ECR_PUBLIC_REPOSITORY_URI:$IMAGE_TAG" -t "$ECR_PUBLIC_REPOSITORY_URI:latest" .
        docker push "$ECR_PUBLIC_REPOSITORY_URI:$IMAGE_TAG"
        docker push "$ECR_PUBLIC_REPOSITORY_URI:latest"
        
        # Guardar URI de la imagen para la notificaci√≥n
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT


  deploy-to-ec2:
    name: Deploy to EC2 Instance
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    steps:
    - name: Deploy to EC2 via SSM Run Command
      uses: peterkimzz/aws-ssm-send-command@v1.1.1
      with:
        instance-ids: ${{ secrets.EC2_INSTANCE_ID }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: sa-east-1
        command: |
          set -e # Salir inmediatamente si cualquier comando falla
          
          echo ">>> Iniciando despliegue en la instancia..."
          
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
          
          echo ">>> Descargando nueva imagen de Docker..."
          docker pull ${{ secrets.ECR_PUBLIC_REPOSITORY_URI }}:latest
          
          echo ">>> Deteniendo y eliminando contenedor antiguo (si existe)..."
          docker stop mi-api || true
          docker rm mi-api || true
          
          echo ">>> Iniciando nuevo contenedor..."
          docker run -d -p 80:8000 --name mi-api --restart always ${{ secrets.ECR_PUBLIC_REPOSITORY_URI }}:latest
          
          echo "‚úÖ ¬°Despliegue en EC2 completado con √©xito!"



  Slack-Notification:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    # Se ejecuta siempre para poder notificar tanto el √©xito como el fracaso.
    if: always()
    steps:
    - name: Send Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_RELEASES }}
        # El t√≠tulo y el color cambian din√°micamente seg√∫n el resultado del job anterior.
        SLACK_COLOR: ${{ needs.build-and-push-to-ecr.result == 'success' && 'good' || 'danger' }}
        SLACK_TITLE: ${{ needs.build-and-push-to-ecr.result == 'success' && '‚úÖ Despliegue Exitoso a ECR' || '‚ùå Despliegue Fallido' }}
        SLACK_USERNAME: CD Pipeline Bot
        SLACK_ICON: https://github.com/favicon.ico
        SLACK_MESSAGE: |
          *Repositorio:* `${{ github.repository }}`
          *Rama:* `${{ github.ref_name }}`
          *Commit:* `${{ github.sha }}`
          *Autor:* `${{ github.actor }}`
          
          ${{ needs.build-and-push-to-ecr.result == 'success' && '‚úÖ La imagen ha sido desplegada con √©xito a Amazon ECR.' || '‚ùå El despliegue de la imagen ha fallado. Revisa los logs para m√°s detalles.' }}

          ${{ needs.build-and-push-to-ecr.result == 'success' && format('Detalles: - Imagen: `{0}`- Tag: `{1}`', needs.build-and-push-to-ecr.outputs.image_uri, needs.build-and-push-to-ecr.outputs.image_tag) || '' }}
          
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
