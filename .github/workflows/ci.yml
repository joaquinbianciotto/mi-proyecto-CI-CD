# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Continuous Integration

on:
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    outputs:
      failure_type: ${{ steps.detect_failure.outputs.failure_type }}
    steps:
    - name: Checkout code  
      uses: actions/checkout@v4

    - name: Build Docker image
      id: build_docker
      run: |
        docker build -t myapp:latest .
        echo "Imagen Docker construida correctamente como myapp:latest"

    - name: Run tests inside Docker container
      id: test_docker
      run: |
        echo "Ejecutando tests dentro del contenedor Docker..."
        docker run --rm myapp:latest pytest -v
        
    - name: Run linting inside Docker container
      id: lint_docker
      run: |
        echo "Ejecutando linting dentro del contenedor Docker..."
        docker run --rm myapp:latest flake8 app/
        
    # Detectar fallos y enviar notificaciones, solo si alguno de los pasos anteriores falla
    - name: Detectar fallos
      id: detect_failure
      if: failure()
      run: |
        if [[ ${{ steps.build_docker.outcome }} == 'failure' ]]; then
          echo "failure_type=üê≥ Error al construir la imagen Docker" >> $GITHUB_OUTPUT
        elif [[ ${{ steps.test_docker.outcome }} == 'failure' ]]; then
          echo "failure_type=üß™ Error en las pruebas (pytest)" >> $GITHUB_OUTPUT
        elif [[ ${{ steps.lint_docker.outcome }} == 'failure' ]]; then
          echo "failure_type=üîç Error en la verificaci√≥n de estilo (flake8)" >> $GITHUB_OUTPUT
        else
          echo "failure_type=unknown" >> $GITHUB_OUTPUT
        fi

  notification:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: build
    if: always() 
    steps:
    - name: Send Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        # El webhook es un secreto, como lo tienes
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        # El color y el t√≠tulo cambian din√°micamente seg√∫n el resultado del job 'build'
        SLACK_COLOR: ${{ needs.build.result == 'success' && 'good' || 'danger' }}
        SLACK_TITLE: ${{ needs.build.result == 'success' && '‚úÖ CI Pipeline Exitoso' || '‚ùå CI Pipeline Fallido' }}
        SLACK_USERNAME: CI Bot
        SLACK_ICON: https://github.com/favicon.ico
        SLACK_MESSAGE: |
          *Repositorio:* `${{ github.repository }}`
          *Pull Request:* `${{ github.event.pull_request.html_url }}`
          *Autor:* `${{ github.actor }}`
          
          # Mensaje din√°mico: Si falla, muestra el error espec√≠fico. Si tiene √©xito, muestra un mensaje de √©xito.
          ${{ needs.build.result == 'success' && 'Todas las validaciones han pasado exitosamente.' || format('La build ha fallado. **Origen del fallo:** {0}', needs.build.outputs.failure_type) }}
          
          [Ver logs del workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})